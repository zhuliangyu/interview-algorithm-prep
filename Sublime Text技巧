看视频学习的目的:
* 看别人写代码是永远学不会的 
* 学习总结!!解题思路!!
* 看答案代码的目的: 学习!!解题思路!!


代码风格: 
* 代码里面不超过三层的缩进, 缩进越少越好
* 一行不超过80个字符
* 命名, 用left代替l, right代替r
* 二元运算符必须有空格 a + b
* 单元运算符, 没有空格 a++, 没有空格; !flag, 没有空格
* 长段的代码, 包装成 函数
* 必须在函数的头部检测corner cases, if null
* 如果返回Boollean类型的函数, 用 is+动词形式来命名
* 不同的逻辑块, 你需要加上空行, 比如一个函数里面, 第一个部分是检测异常, 第二个部分是主函数, 第三个部分是对返回值的处理...每一个部分都需要空行按照逻辑分开
* 两个函数之间要加空行
* 每一个函数之间要有一个空行
* 要写/**
    * This method returns
    * @param num The value to be squared.
    * @return 
    * @throws IOException  If an input or output exception occurred
    */
* 不能有重复代码
* 不用用全局变量, 需要用的变量用参数传进去
* 工程中, 尽量少用递归
* 函数变量名, 用1-2个单词全拼做名称
* 入口必须异常检测
	if (param == null)
	if (s == "")
* 确保数组下表不越界, 用 short cur
	while (i < a.length() && a[i] == ) {
		// 前面做一个保护, 确保不越界的情况, 才可以取数组值
	}
* 使用某个Class的方法的是时候, 当你用点的时候, 一定要确定这个Class不为空, 才可以放心的去点. 必须要做一个保护措施
	while (node != null && node.val > 0) {
		.....
	}
* 多用continue, 少用 if 包裹, 减少我的缩进
	for .... (GOOD)
		if not满足
			continue;
		做一些事情
		做一些事情
	for .... (BAD) 
		if 满足
			做一些事情
			做一些事情
* 减少嵌套的if语句, 让嵌套的if变成并列关系
  --------------------------------BAD--------------
	if 条件1
		做一些事情
		做一些事情
			if 条件2
				做一些事情
				做一些事情
  ------------------------------GOOD---------------
	if !条件1
		continue;
	做一些事情
	做一些事情
	if !条件2
		continue;
	做一些事情
	做一些事情

* 少用else, 如果前面的if里面可以return了, 后面的else就完全没有必要加
if (A) {
	if (B) {
		...
	} else {

	}
} else {
	if (B) {
		...
	} else {
		...
	}
}
  --------------------- 不用 else 的版本 ------
if (A && B) {
	...
}

if (A && !B) {
	....
}






题目分类的方法: 
1. 算法: DFS, BFS, 双指针...
2. 数据结构: Array, Matrix, LinkedList, Tree, Graph...
3. 题目专题: 岛屿问题, 2sum问题, 回文问题...

算法工具箱
* DFS 回溯
	* 组合
	* 排列
	* flood fill 
* BFS
* 搜索
	* 二分法
	* BST 搜索
* 排序
* BinaryTree
* LinkedList
* Array + String
	* 双指针
	* 滑动窗口
	* 前缀和
* 递归
	* Lazy manager模型 T(n-1)去解T(n)的问题 
* Math + 位运算
* DP
* Greedy

数据结构分类
* Hash
* Stack
* Queue
* Deque
* Heap(PQ)
* Graph
* 并查集

在面试考场中, 解题经历的几个步骤: https://github.com/lsr-explore/InterviewPrepAlgorithms
	* Understand the question
	* Identify test cases/conditions
	* Design the solution
	* Implement the solution
	* Review the solution

clarify问题: 
	* input是什么? output是什么
	* 我是否可以修改input? 
	* 给我几个例子? 
	* 是否可以重复元素?
	* 是否已经排过序了?  
	* String
		* 是否只是ASCII
		* 字符串的长度是多少? 
		* 大小写敏感? 
	* 我可以使用更多的内存空间么? 比如hashtable 

寻找测试用例
	* Failure cases - Where the expected solution doesn't exist
	* Variety - wildly varying values or all values are the same
	* Number of elements - small or very large set
	* Null conditions
	* Duplicate conditions
	* Boundary conditions

Design the solution
Sketch out the design. If you know there is a more elegant solution, but you only know how to do the brute force approach, acknowledge that.
	* Observations - Any observations, (e.g. At most one letter can exist an odd number of times in a palindrome)
	* Algorithm - Be able to describe the algorithm in steps
	* Code - Sketch out the solution in pseudo code.
	* Complexity - Be able to describe the complexity of your solution.
	* Consider alternatives - Describe why you are rejecting a certain approach.
	* What data structures will be used.

Implement the solution
	* Write the solution
	* Let the interview know of any utility methods that you don't feel need to be coded (e.g. swap)


拆掉面试过程: 
https://github.com/resumejob/awesome-interviews
https://www.interviewkickstart.com/
https://osjobs.net/

模拟面试以下每个部分: 
	1. 每个知识点的学习(文字 + 视频)
		* https://www.tryexponent.com/courses?src=nav&role=software-engineering
		* https://www.interviewcake.com/
		* http://educative.io/
		* Omkar Deshpande 这个老师的教学视频, 非常的棒!!!
	2. 作业 -- 答疑
	3. 考试 -- 答疑
	4. mock面试
* Leetcode 算法 + 数据结构 - mock
	* AlgoExpert

* 面试buddy 寻找小伙伴
* 系统设计 - mock
* OOD design - mock
* take home exam
	* https://www.codementor.io/ 找导师帮你回答问题
* 修改简历
	* https://zety.com/blog/programmer-resume-example
* 项目经验 + 简历细节
	* 九章 
* behavior question - mock
	* 九章
* 文化: 亚麻的leadership
* 计算机基础知识 - mock
	* 网络
	* 操作系统
	* Java OOP 编程语言基础
		* C++ https://hackr.io/blog/cpp-interview-questions

	* 第三方框架基础
	* JavaScript
	* 前端面试题
	* 后端面试题
	* SQL
	* 设计模式
	* Concurrence
	* Cloud AWS
* 训练OA做题20分钟一道题的能力
	* 截图翻译
	* 准备最近的OA题库
* 刷近期的面经
	* 一亩三分地 https://www.1point3acres.com/bbs/forum-145-1.html
	* https://osjobs.net/topk/
	* https://leetcode.com/discuss/interview-question?currentPage=1&orderBy=hot&query=
* 目标公司面试流程
	* https://leetcode.com/discuss/interview-experience?currentPage=1&orderBy=hot&query=
* 找职位内推
	* 通过Linkedin寻找target公司recruiter的邮件, 给他们发送code email 
	https://www.pathrise.com/guides/how-to-get-a-job-as-a-software-engineer
* FAANG工程师, 模拟面试, 面试有给分数
	* 模拟面试 - 算法 (5 - 6次)
	* 模拟面试 - 系统设计 (3次)
	* 模拟面试 - OOD (3次)
	* 模拟面试 - Behavior Question (3次)
	* https://www.tryexponent.com/coaching?role=swe  每一次200美金
	* https://start.interviewing.io/ 5次600美金
* 自己当做考官给别人打分
	* 给别人做interview, 把自己放在考官的位置 https://start.interviewing.io/dashboard/interviewer
	* youtube 有其他人的面试视频

* 薪水谈判
	https://www.levels.fyi/
	可以让专业公司帮你去做谈判
* 当地社区活动
	* https://www.meetup.com/

上课的优势: 
有一个社区, 让大家能在一起讨论
有TA助教, 能回答问题
每周都有作业和练习
标准答案平台使用java, 而不是C++
有人监督我的进度
有工作经验的人不是都比应届生精明, 如果有工作经验的人还去参加这个培训, 说明真的是好, 而不是骗一些应届生
能被同行作为承托, 肯定是好的机构, 否则没人会拿你做标杆
有复习计划
* 2个月的在线课程, 6个月的持续服务
* 每周的有考试, 给自己压力 (考察规定时间内完成2道题)
* 及时反馈: FANNG面试官
* 15次模拟面试 (每次大约200美金)
* 1:1辅导

Interview Kickstart
* 8周 学习
* 每周学习两次 (4小时)
* 每周练习
* 每周考试
* 12次模拟面试

温哥华目标公司名单: 
https://www.1point3acres.com/bbs/thread-743529-1-1.html
* 亚麻 (招人多)
* 微软 (招人多)
* splunk
* salesforce/tableau
* Square
* Apple
* SAP
* Arista
* Workday
* A Thinking Ape
* Hootsuite
* Visier
* Clio


艾宾浩斯记忆曲线
https://english.yysaa.cn/table

新手必刷50题
https://www.lintcode.com/ladder/190/

九章题目分类: 
https://yisuang1186.gitbooks.io/-shuatibiji/content/

初级算法
https://leetcode-cn.com/leetbook/detail/top-interview-questions-easy/

中级算法
https://leetcode-cn.com/leetbook/read/top-interview-questions-medium/

Java集合介绍
https://www.liaoxuefeng.com/wiki/1252599548343744/1265109905179456

AWS
https://github.com/ptcodes/awesome-aws-certifications#whitepapers

智力测试
https://blog.csdn.net/superzyl/article/details/79068600?utm_medium=distribute.pc_relevant_download.none-task-blog-2~default~BlogCommendFromBaidu~default-12.nonecase&depth_1-utm_source=distribute.pc_relevant_download.none-task-blog-2~default~BlogCommendFromBaidu~default-12.nonecas


三步走: 完全不会做 → 有点思路(有个模糊的大概) → 熟练应用(明白各种细节)
从量变到质变的过程

刷题第一遍: 
	* 理解题意, 知道test case是什么
		* 一个 case pass
		* 一个 case 不pass
		* 几个 edge Corner cases
	* 有解题的方向: 立刻知道这道题用什么算法pattern来解题
刷题第二遍: 
	* 根据pattern我能磕磕碰碰的实现这个算法
	* 培养自己讲题的能力
刷题第三遍:
	* 熟练度 + 时间控制, 简单题12分钟, 中等题: 20分钟 (重点攻克中等题)
	* 准确度: 写出bug free的Java代码在白板上

靠自己的毅力是坚持不了多久的, 你需要买最贵的课程,让自己心疼付出的钱, 这样才能真的逼迫自己刷题.  

在线练习: https://codeinterview.io/

知道要刷题的人有100人, 但是最后可能只有1个人真的下决心去刷

1. 找到最重要的题目 (原题, 母题), 求精不求多!!! 九章老师总结的
很多题，就是多穿了一件马甲的原题。你要学习的是母题, 而不是那些乱七八糟的马甲

一开始不要看答案, 激发自己的好奇心, 让自己死命的想. 越好奇, 看答案后记得越牢固
一般情况下, 你需要让自己1小时在不停的寻找, 寻找的时间越久, 你找到答案越能记住

问题 --> 好奇心  --> 思考 --> 获得奖励, 多巴胺 --> 深入思考...
如何设计自己思考后的奖励? 

1.5 这道题我会问面试官什么样的clarify的问题

2. 每一道题, 都必须要了解一个brute force的解法, 但是你不需要写代码, 你要说出这种解法的时间复杂度

3. 挖掘知识点和考点: 这些题目背后一定考察了一个重要的技巧或者知识点, 抓出背后的重要知识点
看到一道题, 首先需要能区分考点, 到底考的是什么
一个一个专题去刷题, 要按照题目分类刷
重视基础的复习, 妙招没有用

4. (思维导图框架)弄清知识之间的联系: 这个知识点, 在总知识网里面处于什么样的位置
一看某道题目，就从最根本处知道此道题目的来龙去脉，知道它位于整个leetcode体系大厦中的哪个房间
结构化归纳

5. 画图, 画图, 画图 -- 寻找别人的配图题解
听觉学习: 讲解视频
视觉学习: 画解法图
读写学习: 整理标准答案 + 背诵
实践学习: 使用leetcode自测

5.5 找到这类型题目的通用模板, 把标准答案转化为模板的style

6. (找答案) 找到自己可以理解的逻辑清晰的标准答案代码, 总结到自己的答案中.
重点是答案的consistency, 可以总结出套路
自己的总结的答案要有自己的风格, 才能在实战中用上, 任何看起来很炫的代码, 只要你用不上, 就是无用功

6.5 如果答案看不懂怎么办? 
	* 如果有图解最好, 这样图能帮助理解
	* 有些人有写答题思路, 去读别人的解答思路, 尝试理解
	* 使用IDEA上debugger去追踪每一个变量发生了什么变化, 去做断点
	* 代入测试用例, 跑一个实际例子, 最容易理解

7. (解题思路总结笔记) 每一行标准答案写上注释, 帮助自己理解
你不要随意换自己的标准答案, 要总结一套自己看的明白的标准解题, 每次虽然可能忘了, 但是只要看看自己的笔记和注释, 就很容易想起来
这就是你的费曼学习法, 就是自己给自己讲解每一行的代码

8. (拆答案)成一个一个小的步骤, 步骤越小, 越可以重复利用 (积木式乐高解题法)
把大象放进冰箱一共要几步, 一打开冰箱门, 二大象放进冰箱, 三关上冰箱门

9. (会讲)不看标准答案, 口述伪代码实现流程, 主要就是口述自己写的注释的部分

10. (背诵解题思路框架)精确熟练背诵解题思路框架:

	平时上课看教程, 目的是学习解题思路. Sample code也是帮你理解解题思路. 
	整段代码拆分代码块 --> 注释伪代码 --> 提取关键词 (从多到少精简的过程) -> 总结解题思路 (从厚-代码到薄-解题思路的过程)
	在考场中: 
	解题思路 -> 关键词 --> 还原伪代码 --> 还原代码块 (从少还原为多扩展的过程) (从薄-解题思路到厚-代码的过程)

	伪代码, 背注释 -- 背诵自己的语言, 比背诵别人的代码快的多
	规约
	代码拆成几个大块, 一块一块背诵
		每一块抓出一个关键字, 精简背诵的内容
		拍照记忆法, 一块一块的拍照

	你在考场里面, 不是记忆代码的细节, 细节这么多题不可能完全记住, 但是, 你记住了解题思路的框架
	你在考场里面, 大约知道这段代码的框架是什么样子的, 然后你去做填空题, 把细节填入

10.5 训练在考场里, 能将解题思路框架还原出Java无bug的code (这就是基本功的训练)

11. (多题一解)套上模板或者母题例题, 尝试举一反三其他类似题 (传说中的刷题)
从一道典型题目，形成知识体系、形成解题技巧体系，进而简化解题技巧体系
思考自己变种题做不出来原因是什么, 卡在哪里, 反思反思反思

12. (套路): 刷题练到看见某条件，下意识地在几秒钟之内想到某个固定套路，想到做过的某道母题，你就有进步了, 最后把这项技能固化下来. 深入思考, 去领悟, 这部分是无法教的. 
对于题目的深入思考, 升华, 才能将别人的代码变成自己的能力

13. (背诵)!重复!再重复!
一开始只要记忆一个大致的框架, 有一个模糊的头 (比如排序 + hashmap), 然后慢慢根据逻辑补充内容. 不要一开始就要求自己记忆所有细节, 这是不可能做到的. 
都是考记忆熟练而已, 文科学习法, 弱项是记忆.


如何复习: ArrayList扩容复习法
睡前过电影法!!!带着你的问题入睡
当天睡前复习, 第二天复习, 周末复习, 第二周周末复习, 第四周周末复习

以上只是掌握了"固定的套路", 只能解决简单到中等的题目

高难度题其实基本没有套路，或者套路都不固定。这个只能随缘了. 对于你做过的题目的内在深入联系以及其变化思考得太不够了

14 自测 (输出)
简单题: 10-12分钟
中等题: 20分钟
难题: 30-45分钟解
在leetcode里面默写出bug free的代码, 不要抄
看到绿色的check通过测试, 就会让你很快乐

总结错题笔记到代码中: 
自己在自测里面发现的代码错误, 都要以comment形式总结到自己的题解里面, 供下次查阅


15. 多参加模拟面试, 模拟的次数越多 , 越不紧张
让自己丢脸, 调动自己情绪, 你才能记住
你紧张你害怕面试失败, 是因为你觉得面试机会只有一次
就如同你打游戏, 当你知道你可以有无限次死亡无限次训练后, 你并不会感受到压力
你紧张, 说明你参加的面试不够多. 

16. 刷公司题库
按照公司tag和面经来准备
https://www.lintcode.com/problem/enterprise/


Sublime Text使用技巧
1. rename a variable
可以选中一个单词，然后使用control + command + g来选中全部一样的单词，进行统一多点编辑.

2. format java code
 	shift + command + P 
 	coolFormatter

3. search function in all files
	shift + command + f

4. search file name in a folder
	command + p